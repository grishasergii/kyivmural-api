---
openapi: 3.0.1
info:
  title: Kyivmural API
  description: Kyivmural API
  version: 0.3.0
tags:
  - name: mural
    description: Operations about murals
  - name: artist
    description: Operations about artists

paths:
  /artist:
    get:
      summary: Returns a list of artists
      description: Returns a list of artists
      operationId: getArtists
      tags:
        - artist
      responses:
        "200":
          description: An array of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
      security:
        - AwsIamAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: RestApiArtistsIntegrationRole.Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                [
                #foreach($elem in $inputRoot.Items)
                 {
                  "artist_name_uk" : "$elem.artist_name_uk.S",
                  "artist_name_en" : "$elem.artist_name_en.S",
                  "nickname" : "$elem.nickname.S",
                  "webpage_url" : "$elem.webpage_url.S",
                  "about_uk" : "$elem.about_uk.S",
                  "about_en" : "$elem.about_en.S"
                }
                #if($foreach.hasNext),#end
                #end
                ]
        requestTemplates:
          application/json:
            Fn::Sub: "{\n    \"TableName\": \"${ArtistsTableName}\"\n}"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    post:
      summary: Add a new artist
      description: add a new artist
      operationId: addArtist
      tags:
        - artist
      requestBody:
        description: Artist object to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Artist"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Bad request, invalid body
        "409":
          description: Conflict
        "500":
          description: Internal server error
      security:
        - AwsIamAuthorizer: [ ]
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: RestApiArtistsIntegrationRole.Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
        responses:
          default:
            statusCode: "201"
          "400":
            statusCode: "409"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                $input.json("$")
                #if($inputRoot.toString().contains("com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException"))
                  #set($context.responseOverride.status = 409)
                #end
          5\d{2}:
            statusCode: "500"
        requestTemplates:
          application/json:
            Fn::Sub: |
              {
                "TableName": "${ArtistsTableName}",
                "ConditionExpression": "attribute_not_exists(artist_name_en)",
                "Item":{
                  "artist_name_uk" : {
                    "S": "$input.path('$.artist_name_uk')"
                  },
                  "artist_name_en" : {
                    "S": "$input.path('$.artist_name_en')"
                  },
                  "nickname" : {
                    "S": "$input.path('$.nickname')"
                  },
                  "webpage_url" : {
                    "S": "$input.path('$.webpage_url')"
                  },
                  "about_uk" : {
                    "S": "$input.path('$.about_uk')"
                  },
                  "about_en" : {
                    "S": "$input.path('$.about_en')"
                  },
                }
              }
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws

  /murals:
    get:
      summary: Returns a list of murals
      description: Returns a list of murals
      operationId: getMurals
      tags:
        - mural
      responses:
        "200":
          description: An array of murals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MuralSlim"
      security:
        - AwsIamAuthorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMuralCRUDArn}/invocations
        payloadFormatVersion: "2.0"

    post:
      summary: Add a new mural
      description: Add a new mural
      operationId: addMural
      tags:
        - mural
      requestBody:
        description: Mural objects to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mural"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Bad request, invalid body
        "401":
          description: Bad request, authentication problem
        "409":
          description: Bad request, conflict
        "500":
          description: Internal server error
      security:
        - AwsIamAuthorizer: []
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMuralCRUDArn}/invocations
        payloadFormatVersion: "2.0"

  /murals/{muralId}/{artistNameEn}:
    get:
      tags:
        - mural
      summary: Returns a single mural
      description: Returns a single mural
      operationId: getMuralByIdAndArtistName
      parameters:
        - name: muralId
          in: path
          description: ID of the mural to return
          required: true
          schema:
            type: string
            format: uuid
        - name: artistNameEn
          in: path
          description: name of the artist
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mural"
        "400":
          description: Bad request, invalid body
        "401":
          description: Bad request, authentication problem
        "404":
          description: Mural not found
        "500":
          description: Internal server error
      security:
        - AwsIamAuthorizer: []
      x-amazon-apigateway-request-validator: parameters
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMuralCRUDArn}/invocations
        payloadFormatVersion: "2.0"
    put:
      summary: Update an existing mural
      description: Update an existing mural
      operationId: updateMural
      tags:
        - mural
      parameters:
        - name: muralId
          in: path
          description: ID of the mural to return
          required: true
          schema:
            type: string
            format: uuid
        - name: artistNameEn
          in: path
          description: name of the artist
          required: true
          schema:
            type: string
      requestBody:
        description: Mural objects to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mural"
        required: true
      responses:
        "204":
          description: Successful operation
        "400":
          description: Bad request, invalid body
        "401":
          description: Bad request, authentication problem
        "404":
          description: Mural not found
        "500":
          description: Internal server error
      security:
        - AwsIamAuthorizer: [ ]
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMuralCRUDArn}/invocations
        payloadFormatVersion: "2.0"
    delete:
      summary: Deletes an existing mural
      description: Deletes an existing mural
      operationId: deleteMural
      tags:
        - mural
      parameters:
        - name: muralId
          in: path
          description: ID of the mural to return
          required: true
          schema:
            type: string
            format: uuid
        - name: artistNameEn
          in: path
          description: name of the artist
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request, invalid body
        "401":
          description: Bad request, authentication problem
        "404":
          description: Mural not found
        "500":
          description: Internal server error
      security:
        - AwsIamAuthorizer: [ ]
      x-amazon-apigateway-request-validator: parameters
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaMuralCRUDArn}/invocations
        payloadFormatVersion: "2.0"

x-amazon-apigateway-request-validators:
  body:
    validateRequestBody: true
    validateRequestParameters: false
  parameters:
    validateRequestBody: false
    validateRequestParameters: true
  all:
    validateRequestBody: true
    validateRequestParameters: true

components:
  schemas:
    MuralSlim:
      type: object
      description: Slim version of the Mural object
      properties:
        id:
          type: string
          format: uuid
        artist_name_en:
          type: string
          nullable: true
        thumbnail:
          type: string
          format: uri
        geo_position:
          $ref: "#/components/schemas/GeoPosition"
        mural_status:
          $ref: "#/components/schemas/MuralStatus"
    Mural:
      type: object
      properties:
        id:
          type: string
          format: uuid
        artist_name_en:
          type: string
          nullable: true
        thumbnail:
          type: string
          format: uri
        photos:
          type: array
          items:
            $ref: "#/components/schemas/MuralPhoto"
        description:
          type: object
          properties:
            en:
              $ref: "#/components/schemas/MuralDescription"
            uk:
              $ref: "#/components/schemas/MuralDescription"
        mural_status:
          $ref: "#/components/schemas/MuralStatus"
        geo_position:
          $ref: "#/components/schemas/GeoPosition"
    GeoPosition:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    MuralStatus:
      type: string
      description: Mural Status
      enum:
        - active
        - removed
    MuralPhoto:
      type: object
      properties:
        uri:
          type: string
          format: uri
        author_name:
          type: string
          nullable: true
        author_url:
          type: string
          nullable: true
    MuralDescription:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    Artist:
      type: object
      properties:
        artist_name_en:
          type: string
        artist_name_uk:
          type: string
        nickname:
          type: string
          nullable: true
        webpage_url:
          type: string
          format: uri
          nullable: true
        about_en:
          type: string
          nullable: true
        about_uk:
          type: string
          nullable: true
  securitySchemes:
    AwsIamAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
